# Fish plugin manager.
https://github.com/jorgebucaran/fisher

# fzf plugin for fish
https://github.com/jethrokuan/fzf

# Enable "out-f-the-box" FZF fish keybindings
/usr/share/doc/fzf/README.Debian

# fish config file location
~/.config/fish/config.fish


# To make fish your default shell:
# Add the line /usr/local/bin/fish to /etc/shells
echo /usr/local/bin/fish | sudo tee -a /etc/shells
# Change your default shell with 
chsh -s /usr/local/bin/fish
# Need to log out and back in again.

# apply gitlint patches
cd ~/swdev/gitlint
git am ~/repos/subtle_dotfiles/gitlint_msgfile_kept_after_edit.patch
git am ~/repos/subtle_dotfiles/GITLINT_CONFIG_env_var.patch

# pip install this patched version of gitlint
cd ~/swdev/gitlint
pip install -e .

ln -s ~/repos/subtle_dotfiles/vimrc ~/.vim/vimrc
ln -s ~/repos/subtle_dotfiles/init.vim ~/.config/nvim/init.vim
ln -s ~/repos/subtle_dotfiles/config.fish ~/.config/fish/config.fish
ln -s ~/repos/subtle_dotfiles/tmux.conf ~/.config/tmux/tmux.conf
ln -s ~/repos/subtle_dotfiles/gitconfig ~/.config/git/config
ln -s ~/repos/subtle_dotfiles/gitconfig-work ~/.config/git/gitconfig-work
ln -s ~/repos/subtle_dotfiles/fish_prompt.fish ~/.config/fish/functions/fish_prompt.fish
ln -s ~/repos/subtle_dotfiles/.bashrc ~/

#==============================================================================
# symlink bin stuff
#==============================================================================
mkdir -p ~/.local/bin
ln -s ~/swdev/tools-and-docs/translations/examine_translations.py ~/.local/bin/
ln -s ~/swdev/tools-and-docs/translations/count_translations.py ~/.local/bin/
ln -s ~/swdev/tools-and-docs/translations/fix_attributes.py ~/.local/bin/
ln -s ~/swdev/tools-and-docs/translations/repeat_statistics.py ~/.local/bin/
ln -s ~/swdev/tools-and-docs/translations/longest_language.py ~/.local/bin/


#==============================================================================
# Gitlint setup
#==============================================================================

[I] ~/swdev/ci_gitlint/gitlint (master|✔) $ mkdir -p ~/.config/gitlint
[I] ~/swdev/ci_gitlint/gitlint (master|✔) $ cp ~/swdev/ci_gitlint/gitlint/.gitlint ~/.config/gitlint/gitlint.ini
[I] ~/swdev/ci_gitlint/gitlint (master|✔) $ #cp ~/swdev/ci_gitlint/gitlint/rules/body_max_line_length_with_exceptions.py ~/.config/gitlint/gitlint-rules
[I] ~/swdev/ci_gitlint/gitlint (master|✔) $ mkdir ~/.config/gitlint/gitlint-rules
[I] ~/swdev/ci_gitlint/gitlint (master|✔) $ cp ~/swdev/ci_gitlint/gitlint/rules/body_max_line_length_with_exceptions.py ~/.config/gitlint/gitlint-rules
[I] ~/swdev/ci_gitlint/gitlint (master|✔) $ cp ~/swdev/ci_gitlint/gitlint/rules/title_imperative_mood.py ~/.config/gitlint/gitlint-rules
[I] ~/swdev/ci_gitlint/gitlint (master|✔) $ cp ~/swdev/subtle_dotfiles/gitlintrc.fish ~/.config/gitlint/gitlintrc.fish

https://stackoverflow.com/questions/21903805/how-to-download-a-single-commit-diff-from-github
Go to the commit you want to use as a patch, and at `.patch` to the end of the url.

https://github.com/jorisroovers/gitlint/commit/57bc613c06b49df7e32493d37084bc4bf830d33e.patch
Save as gitlint_msgfile_kept_after_edit.patch

https://github.com/jorisroovers/gitlint/commit/02c0226133d9fe103bbb5bdec70fc17094c55fb3.patch
Save as GITLINT_CONFIG_env_var.patch

git am ~/swdev/subtle_dotfiles/GITLINT_CONFIG_env_var.patch
git am ~/swdev/subtle_dotfiles/gitlint_msgfile_kept_after_edit.patch

git clone https://github.com/jorisroovers/gitlint.git

pip3 install -e .

gitlint install-hook

source ~/.config/gitlint/gitlintrc.fish

needs to be added to ~/.config/fish/config.fish







#==============================================================================
# Attempting to run perf on python script
#==============================================================================
`perf record -F 9999 -g -o perf.data python ~/swdev/tools-and-docs/debug/record_dumps.py`

```
Error:
Access to performance monitoring and observability operations is limited.
Consider adjusting /proc/sys/kernel/perf_event_paranoid setting to open
access to performance monitoring and observability operations for processes
without CAP_PERFMON, CAP_SYS_PTRACE or CAP_SYS_ADMIN Linux capability.
More information can be found at 'Perf events and tool security' document:
https://www.kernel.org/doc/html/latest/admin-guide/perf-security.html
perf_event_paranoid setting is 4:
  -1: Allow use of (almost) all events by all users
      Ignore mlock limit after perf_event_mlock_kb without CAP_IPC_LOCK
>= 0: Disallow raw and ftrace function tracepoint access
>= 1: Disallow CPU event access
>= 2: Disallow kernel profiling
To make the adjusted perf_event_paranoid setting permanent preserve it
in /etc/sysctl.conf (e.g. kernel.perf_event_paranoid = <setting>)
```

`sudo sysctl kernel.perf_event_paranoid=-1`

Fixed that error, now we get a different warning

```
WARNING: Kernel address maps (/proc/{kallsyms,modules}) are restricted,
check /proc/sys/kernel/kptr_restrict and /proc/sys/kernel/perf_event_paranoid.

Samples in kernel functions may not be resolved if a suitable vmlinux
file is not found in the buildid cache or in the vmlinux path.

Samples in kernel modules won't be resolved at all.

If some relocation was applied (e.g. kexec) symbols may be misresolved
even with a suitable vmlinux or kallsyms file.

Couldn't record kernel reference relocation symbol
Symbol resolution may be skewed if relocation was used (e.g. kexec).
Check /proc/kallsyms permission or run as root.
```

To fix this warning I ran:
`sudo sh -c " echo 0 > /proc/sys/kernel/kptr_restrict"`

Here is a link on how to run perf for python,
https://docs.python.org/3/howto/perf_profiling.html

I didn't have much luck with being able to see what python functions were being called.
