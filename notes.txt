# Fish plugin manager.
https://github.com/jorgebucaran/fisher

# fzf plugin for fish
https://github.com/jethrokuan/fzf

# Enable "out-f-the-box" FZF fish keybindings
/usr/share/doc/fzf/README.Debian

# fish config file location
~/.config/fish/config.fish


# To make fish your default shell:
# Add the line /usr/local/bin/fish to /etc/shells
echo /usr/local/bin/fish | sudo tee -a /etc/shells
# Change your default shell with 
chsh -s /usr/local/bin/fish
# Need to log out and back in again.

# apply gitlint patches
cd ~/swdev/gitlint
git am ~/repos/subtle_dotfiles/gitlint_msgfile_kept_after_edit.patch
git am ~/repos/subtle_dotfiles/GITLINT_CONFIG_env_var.patch

# pip install this patched version of gitlint
cd ~/swdev/gitlint
pip install -e .

ln -s ~/repos/subtle_dotfiles/vimrc ~/.config/nvim/init.vim
ln -s ~/repos/subtle_dotfiles/config.fish ~/.config/fish/config.fish
ln -s ~/repos/subtle_dotfiles/tmux.conf ~/.config/tmux/tmux.conf
ln -s ~/repos/subtle_dotfiles/gitconfig ~/.config/git/config
ln -s ~/repos/subtle_dotfiles/gitconfig-work ~/.config/git/gitconfig-work
ln -s ~/repos/subtle_dotfiles/fish_prompt.fish ~/.config/fish/functions/fish_prompt.fish
ln -s ~/repos/subtle_dotfiles/.bashrc ~/

#==============================================================================
# symlink bin stuff
#==============================================================================
mkdir -p ~/.local/bin
ln -s ~/swdev/tools-and-docs/translations/examine_translations.py ~/.local/bin/
ln -s ~/swdev/tools-and-docs/translations/count_translations.py ~/.local/bin/
ln -s ~/swdev/tools-and-docs/translations/fix_attributes.py ~/.local/bin/
ln -s ~/swdev/tools-and-docs/translations/repeat_statistics.py ~/.local/bin/
ln -s ~/swdev/tools-and-docs/translations/longest_language.py ~/.local/bin/


#==============================================================================
# Gitlint setup
#==============================================================================

#------------------------------------------------------------------------------
# Install gitlint
#------------------------------------------------------------------------------
git clone https://github.com/jorisroovers/gitlint.git

# First install dependencies
cd gitlint/gitlint-core
pip install -e .

# Install gitlint
cd ..
pip3 install -e .

#------------------------------------------------------------------------------
# Configing gitlint
#------------------------------------------------------------------------------
cd ~/swdev
git clone git@source.raven.engineering:atd/ci/gitlint.git

# symlink gitllint.ini
mkdir -p ~/.config/gitlint
ln -s ~/swdev/ci_gitlint/gitlint/.gitlint ~/.config/gitlint/gitlint.ini

# Add extra rules to the right spot
mkdir ~/.config/gitlint/gitlint-rules
ln -s ~/swdev/ci_gitlint/gitlint/rules/body_max_line_length_with_exceptions.py ~/.config/gitlint/gitlint-rules
ln -s ~/swdev/ci_gitlint/gitlint/rules/title_imperative_mood.py ~/.config/gitlint/gitlint-rules

# Special thing for the fish shell to set the right environment variables.
ln -s ~/swdev/subtle_dotfiles/gitlintrc.fish ~/.config/gitlint/gitlintrc.fish

# Finally, install gitlint as a git `commit-msg` hook.
# https://jorisroovers.com/gitlint/dev/commit_hooks/
cd <path/to/git/repo>
gitlint install-hook

# This is already in config.fish, but making not of it here just in-case.
source ~/.config/gitlint/gitlintrc.fish
# Add the above line to ~/.config/fish/config.fish


#==============================================================================
# Random Stuff
#==============================================================================

Password on old pc
1Raven!
Fourteen14!raven




#==============================================================================
# Attempting to run perf on python script
#==============================================================================
`perf record -F 9999 -g -o perf.data python ~/swdev/tools-and-docs/debug/record_dumps.py`

```
Error:
Access to performance monitoring and observability operations is limited.
Consider adjusting /proc/sys/kernel/perf_event_paranoid setting to open
access to performance monitoring and observability operations for processes
without CAP_PERFMON, CAP_SYS_PTRACE or CAP_SYS_ADMIN Linux capability.
More information can be found at 'Perf events and tool security' document:
https://www.kernel.org/doc/html/latest/admin-guide/perf-security.html
perf_event_paranoid setting is 4:
  -1: Allow use of (almost) all events by all users
      Ignore mlock limit after perf_event_mlock_kb without CAP_IPC_LOCK
>= 0: Disallow raw and ftrace function tracepoint access
>= 1: Disallow CPU event access
>= 2: Disallow kernel profiling
To make the adjusted perf_event_paranoid setting permanent preserve it
in /etc/sysctl.conf (e.g. kernel.perf_event_paranoid = <setting>)
```

`sudo sysctl kernel.perf_event_paranoid=-1`

Fixed that error, now we get a different warning

```
WARNING: Kernel address maps (/proc/{kallsyms,modules}) are restricted,
check /proc/sys/kernel/kptr_restrict and /proc/sys/kernel/perf_event_paranoid.

Samples in kernel functions may not be resolved if a suitable vmlinux
file is not found in the buildid cache or in the vmlinux path.

Samples in kernel modules won't be resolved at all.

If some relocation was applied (e.g. kexec) symbols may be misresolved
even with a suitable vmlinux or kallsyms file.

Couldn't record kernel reference relocation symbol
Symbol resolution may be skewed if relocation was used (e.g. kexec).
Check /proc/kallsyms permission or run as root.
```

To fix this warning I ran:
`sudo sh -c " echo 0 > /proc/sys/kernel/kptr_restrict"`

Here is a link on how to run perf for python,
https://docs.python.org/3/howto/perf_profiling.html

I didn't have much luck with being able to see what python functions were being called.

#==============================================================================
# RadViewer.exe
#==============================================================================
#Installed a bunch of wine packages, not sure which ones are actually needed
Sudo apt install wine
Sudo apt install winetricks
sudo apt install mono-complete
sudo apt install mono
sudo apt install wine32-preloader
sudo apt install winetricks
sudo apt install wine32:i386

# Ran `winetricks` added a new 32bit prefix
# Went here https://dl.winehq.org/wine/wine-mono/ and downloaded the latest .msi (9.4.0 at the time)
# Ran `winetricks` selected to run the "uninstaller" then installed the .msi I just downloaded
# From `winetricks` select to "Run an arbitrary executable (.exe/.msi/.msu)
# I think it is the same as doing:
wine RadViewer.exe

#==============================================================================
# ROS related snippets
#==============================================================================

#------------------------------------------------------------------------------
# Qt Creator additional startup commands
#------------------------------------------------------------------------------
set index-cache directory ~/.cache/gdb

set auto-load safe-path /

set solib-search-path %{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/fishspear/:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/fishspear/plugins:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/fishspear/plugins/ui:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/fishspear/plugins/ui/tractors_carts/:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/fishspear/plugins/be:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/fishspear/plugins/can/:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/fishspear/plugins/can/isobus/:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/fishspear/plugins/demo/:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/fishspear/plugins/dispatchers/:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/fishspear/plugins/ui/jobConfirmation/:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/fishspear/plugins/serial:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/fishspear/plugins/earlybird/:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/psf/atd-ms-supervisor/:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/psf/iso_ecu_host/:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/psf/ipc-proxy/:%{ActiveProject:BuildConfig:Path}/distro/usr/bin/raven/psf/Logger/

handle SIGILL pass nostop noprint

set index-cache directory ~/.cache/gdb

# deploy over reverse ssh
# need the `-e 'ssh -p 2222'` piece, e.g. :
rsync -rltvc --inplace -e 'ssh -p 2222'  /tmp/QtCreator-RfZPfn/staging-187719c5a3e15103/usr/bin/raven/ root@localhost:/

#------------------------------------------------------------------------------

sqlite3 /usr/bin/raven/databases/my.db.sqlite "SELECT absolutePath FROM files WHERE displayName LIKE 'AgSync-3610394';"

mono ~/swdev/radviewer/RadViewer/bin/Debug/RadViewer.exe ./\{5aff1568-1f66-4692-ad28-a67ae8caff52\}/\{5aff1568-1f66-4692-ad28-a67ae8caff52\}.jdf

xmllint --noout --schema /home/ajp/swdev/xml-handler/ISOLibraryGeneration/ISO11783_TaskFile_V4-2.xsd ~/jeff_TASKDATA.XML

ps -ef | grep -e "devprog" -e "jetstream" -e "softwarelauncher" -e "nx_farm_display_service"

mkdir -p /usr/bin/raven/userFiles/usbService

rsync -Prltvc --info=progress2 --inplace --partial /tmp/QtCreator-eMvDhp/staging-ccee0d930d548cb4/ root@192.168.0.10:/

x11vnc --forever --shared -noxdamage -ncache 1 &

.headers on
.mode column

rvn@)%EIIO

sqlite3 /usr/bin/raven/databases/my.db.sqlite "UPDATE startupUnlock SET job_sec_expiration = 2000000000;"
